{"version":3,"sources":["Character-card.js","App.js","serviceWorker.js","index.js","img/spinner.svg"],"names":["Character","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","chosenCharacterData","undefined","setState","name","url","concat","isLoading","fetch","then","response","json","data","img","images","fixed_height","state","_this$state","eye_color","height","skin_color","react_default","a","createElement","src","spinner","className","alt","Component","App","handleChange","e","chosenCharacter","target","value","handleSubmit","preventDefault","characters","filter","char","componentDidMount","results","catch","error","console","log","length","onSubmit","onChange","map","character","key","type","Character_card_Character","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.86cd9883.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport spinner from './img/spinner.svg';\n\nexport default class Character extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: '',\n      chosenCharacterData: [],\n      isLoading: false\n    };\n  }\n\n  componentDidUpdate = prevProps => {\n    const { chosenCharacterData } = this.props;\n    if (chosenCharacterData !== undefined) {\n      if (chosenCharacterData !== prevProps.chosenCharacterData) {\n        this.setState({\n          chosenCharacterData: chosenCharacterData\n        });\n\n        let api_key = 'On5G7wLclgHHPw1vIhKYgz9SMue0pLip';\n        const name = chosenCharacterData.name;\n        const url = `https://api.giphy.com/v1/gifs/search?q=${name}&api_key=${api_key}&limit=1`;\n\n        this.setState({\n          isLoading: true\n        });\n        fetch(url)\n          .then(response => response.json())\n          .then(data =>\n            this.setState({\n              img: data.data[0].images.fixed_height.url,\n              isLoading: false\n            })\n          );\n      }\n    }\n  };\n\n  render() {\n    const { isLoading, img, chosenCharacterData } = this.state;\n    const { name, eye_color, height, skin_color } = chosenCharacterData;\n    if (isLoading) {\n      return <img src={spinner} className=\"spinner\" alt=\"loading spinner\" />;\n    } else {\n      return (\n        <div className=\"container-flex\">\n          <div className=\"img-box\">\n            <img src={img} alt={name + ' GIF'} />{' '}\n          </div>{' '}\n          <div className=\"info-box\">\n            <p> Name: {name} </p> <p> Eye color: {eye_color} </p>{' '}\n            <p> Height: {height} </p> <p> Skin color: {skin_color} </p>{' '}\n          </div>{' '}\n        </div>\n      );\n    }\n  }\n}\n","import React, {\n  Component\n} from 'react';\nimport Character from './Character-card';\nimport spinner from './img/spinner.svg';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: false,\n      characters: {},\n      chosenCharacter: '',\n      chosenCharacterData: {}\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      chosenCharacter: e.target.value\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      chosenCharacterData: this.state.characters.filter(\n        (char) => char.name === this.state.chosenCharacter\n      )\n    });\n  };\n\n  componentDidMount = () => {\n    this.setState({\n      isLoading: true\n    });\n    fetch('https://swapi.co/api/people/?page=2')\n      .then((response) => response.json())\n      .then((data) =>\n        this.setState({\n          isLoading: false,\n          characters: data.results,\n          chosenCharacter: data.results[0].name,\n          chosenCharacterData: data.results[0]\n        })\n      )\n      .catch((error) => console.log(error));\n  };\n\n  render() {\n    const {\n      isLoading,\n      characters,\n      chosenCharacter,\n      chosenCharacterData\n    } = this.state;\n    if (isLoading) {\n      return <img src = {\n        spinner\n      }\n      className = \"spinner\"\n      alt = \"loading spinner\" / > ;\n    } else {\n      if (characters.length > 0) {\n        return ( <\n          div >\n          <\n          div className = \"background\" / >\n          <\n          div className = \"midground\" / >\n          <\n          div className = \"foreground\" / >\n          <\n          div className = \"form\" >\n          <\n          form onSubmit = {\n            this.handleSubmit\n          } >\n          <\n          label className = \"label\" >\n          Choose a SW character:\n          <\n          select value = {\n            chosenCharacter\n          }\n          onChange = {\n            this.handleChange\n          } > {\n            characters.map((character) => ( <\n              option key = {\n                character.name\n              }\n              value = {\n                character.name\n              } > {\n                character.name\n              } <\n              /option>\n            ))\n          } <\n          /select> <\n          /label> <\n          input type = \"submit\"\n          value = \"Submit\" / >\n          <\n          /form> <\n          /div> <\n          div className = \"container\" >\n          <\n          div className = \"container-background\" >\n          <\n          Character chosenCharacterData = {\n            chosenCharacterData[0]\n          }\n          /> <\n          /div> <\n          /div> <\n          /div>\n        );\n      }\n      return null;\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/spinner.5dabaa7a.svg\";"],"sourceRoot":""}